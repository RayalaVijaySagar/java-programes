// multi-threading

public class practice {
    public static void main(String args[]){
        Runnable obj1=new hi();
        Runnable obj2=new hello();
        Thread t1=new Thread(obj1);
        Thread t2=new Thread(  obj2);
        t1.start();
        try{ Thread.sleep(10); } catch(Exception e){
        }
        t2.start();

    }

}
class hi implements Runnable {
    public void run() {
        for (int i = 1; i <= 5; i++) {
            System.out.print("hi   ");
            try {
                Thread.sleep(1000);
            } catch (Exception e) {
            }
        }
    }
}

class hello implements Runnable {
        public void run() {
            for (int i = 1; i <= 5; i++) {
                System.out.print("Hello   ");
                try {
                    Thread.sleep(1000);
                } catch (Exception e) {
                }
            }
        }
    }
    
    
    
    
    
    
    // multi-threading using anonymous class and lambda Expression
    public class prepare {
    public static void main(String args[]){
        Runnable obj1=() -> {
                for (int i = 1; i <= 5; i++) {
                    System.out.print("hi   ");
                    try {
                        Thread.sleep(1000);
                    } catch (Exception e) {}
            }
        };

        Runnable obj2=()->{
                for (int i = 1; i <= 5; i++) {
                    System.out.print("Hello   ");
                    try {
                        Thread.sleep(1000);
                    } catch (Exception e) {}
                }
        };
        Thread t1=new Thread(obj1);
        Thread t2=new Thread(obj2);
        t1.start();
        try{ Thread.sleep(10); } catch(Exception e){
        }
        t2.start();

    }
}
    
    
    
    
    // multi-threading by passing object in thread its-self
    
    
    
    
   public class prepare {
    public static void main(String args[]){

        Thread t1=new Thread(() -> {
            for (int i = 1; i <= 5; i++) {
                System.out.print("hi   ");
                try {
                    Thread.sleep(1000);
                } catch (Exception e) {}
            }
        });
        Thread t2=new Thread(()->{
            for (int i = 1; i <= 5; i++) {
                System.out.print("Hello   ");
                try {
                    Thread.sleep(1000);
                } catch (Exception e) {}
            }
        });
        t1.start();
        try{ Thread.sleep(10); } catch(Exception e){
        }
        t2.start();
    }
}
